{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Paipi11/Proyecto_control_calidad/blob/main/scripts/preprocessing/main.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "E6udLSEZXPOI",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "623a67e6-c7b5-43d3-f532-78990d2b4ad0"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: kagglehub in /usr/local/lib/python3.11/dist-packages (0.3.12)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.11/dist-packages (from kagglehub) (24.2)\n",
            "Requirement already satisfied: pyyaml in /usr/local/lib/python3.11/dist-packages (from kagglehub) (6.0.2)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from kagglehub) (2.32.3)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.11/dist-packages (from kagglehub) (4.67.1)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests->kagglehub) (3.4.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests->kagglehub) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests->kagglehub) (2.4.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests->kagglehub) (2025.7.9)\n"
          ]
        }
      ],
      "source": [
        "!pip install kagglehub"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Cargamos las librerías necesarias para realizar los filtros y depuración de los datos"
      ],
      "metadata": {
        "id": "dkz0BaQJZShH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import kagglehub\n",
        "import shutil\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from pathlib import Path\n",
        "from PIL import Image"
      ],
      "metadata": {
        "id": "8KAMmlLpXluy"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "ruta = kagglehub.dataset_download(\"leftin/fruit-ripeness-unripe-ripe-and-rotten\")\n",
        "ruta_destino = \"/kaggle/working/\"\n",
        "\n",
        "if os.path.exists(ruta_destino):\n",
        "    shutil.rmtree(ruta_destino)\n",
        "\n",
        "shutil.copytree(ruta, ruta_destino)\n",
        "print(f\"Dataset copiado a: {ruta_destino}\")"
      ],
      "metadata": {
        "id": "VH6K9z5CXssD",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "46b4d5a0-6cfb-4b10-9ae8-d76366dbf6d2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dataset copiado a: /kaggle/working/\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def mostr(carpeta, n=0):\n",
        "    esp = \"  \" * n +\"-\"\n",
        "    for i in sorted(os.listdir(carpeta)):\n",
        "        ruta = os.path.join(carpeta, i)\n",
        "        if os.path.isdir(ruta):\n",
        "            print(esp + i)\n",
        "            mostr(ruta, n +1)\n",
        "mostr(ruta_destino)"
      ],
      "metadata": {
        "id": "Hbe3TJ56X0Ax",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "333287a1-0a4b-4cf7-8248-78f66ed592d7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-fruit_ripeness_dataset\n",
            "  -archive (1)\n",
            "    -dataset\n",
            "      -dataset\n",
            "        -test\n",
            "          -freshapples\n",
            "          -freshbanana\n",
            "          -freshoranges\n",
            "          -rottenapples\n",
            "          -rottenbanana\n",
            "          -rottenoranges\n",
            "          -unripe apple\n",
            "          -unripe banana\n",
            "          -unripe orange\n",
            "        -train\n",
            "          -freshapples\n",
            "          -freshbanana\n",
            "          -freshoranges\n",
            "          -rottenapples\n",
            "          -rottenbanana\n",
            "          -rottenoranges\n",
            "          -unripe apple\n",
            "          -unripe banana\n",
            "          -unripe orange\n",
            "      -test\n",
            "        -freshapples\n",
            "        -freshbanana\n",
            "        -freshoranges\n",
            "        -rottenapples\n",
            "        -rottenbanana\n",
            "        -rottenoranges\n",
            "        -unripe apple\n",
            "        -unripe banana\n",
            "        -unripe orange\n",
            "      -train\n",
            "        -freshapples\n",
            "        -freshbanana\n",
            "        -freshoranges\n",
            "        -rottenapples\n",
            "        -rottenbanana\n",
            "        -rottenoranges\n",
            "        -unripe apple\n",
            "        -unripe banana\n",
            "        -unripe orange\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "base_path = \"/kaggle/working/fruit_ripeness_dataset\"\n",
        "origen_dataset = os.path.join(base_path, \"archive (1)\", \"dataset\", \"dataset\")\n",
        "destino_dataset = os.path.join(base_path, \"dataset\")\n",
        "\n",
        "# Elimino la data duplicada\n",
        "duplicados_path = os.path.join(base_path, \"archive (1)\", \"dataset\")\n",
        "for folder in [\"train\", \"test\"]:\n",
        "    ruta_duplicada = os.path.join(duplicados_path, folder)\n",
        "    if os.path.exists(ruta_duplicada):\n",
        "        shutil.rmtree(ruta_duplicada)\n",
        "        print(f\"Eliminado duplicado: {ruta_duplicada}\")\n",
        "\n",
        "# Muevo la raíz de la carpeta para no tener tanta jerarquía\n",
        "if os.path.exists(destino_dataset):\n",
        "    shutil.rmtree(destino_dataset)\n",
        "\n",
        "shutil.move(origen_dataset, destino_dataset)\n",
        "print(f\"Dataset movido a: {destino_dataset}\")\n",
        "\n",
        "# Elimino carpetas vacías\n",
        "archive_path = os.path.join(base_path, \"archive (1)\")\n",
        "if os.path.exists(archive_path):\n",
        "    shutil.rmtree(archive_path)\n",
        "    print(\"Carpeta 'archive (1)' eliminada\")\n",
        "else:\n",
        "    print(\"La carpeta 'archive (1)' ya no existe\")\n",
        "\n",
        "# Elimino las de unripe\n",
        "for split in [\"train\", \"test\"]:\n",
        "    split_path = os.path.join(destino_dataset, split)\n",
        "    if os.path.exists(split_path):\n",
        "        for folder in os.listdir(split_path):\n",
        "            if \"unripe\" in folder.lower():\n",
        "                folder_path = os.path.join(split_path, folder)\n",
        "                if os.path.isdir(folder_path):\n",
        "                    shutil.rmtree(folder_path)\n",
        "                    print(f\"Carpeta eliminada: {folder_path}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qNO58Pm4R9R8",
        "outputId": "1fa0186b-d4a5-4132-ccae-34470864fd6b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Eliminado duplicado: /kaggle/working/fruit_ripeness_dataset/archive (1)/dataset/train\n",
            "Eliminado duplicado: /kaggle/working/fruit_ripeness_dataset/archive (1)/dataset/test\n",
            "Dataset movido a: /kaggle/working/fruit_ripeness_dataset/dataset\n",
            "Carpeta 'archive (1)' eliminada\n",
            "Carpeta eliminada: /kaggle/working/fruit_ripeness_dataset/dataset/train/unripe banana\n",
            "Carpeta eliminada: /kaggle/working/fruit_ripeness_dataset/dataset/train/unripe orange\n",
            "Carpeta eliminada: /kaggle/working/fruit_ripeness_dataset/dataset/train/unripe apple\n",
            "Carpeta eliminada: /kaggle/working/fruit_ripeness_dataset/dataset/test/unripe banana\n",
            "Carpeta eliminada: /kaggle/working/fruit_ripeness_dataset/dataset/test/unripe orange\n",
            "Carpeta eliminada: /kaggle/working/fruit_ripeness_dataset/dataset/test/unripe apple\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "base_path = \"/kaggle/working/fruit_ripeness_dataset/dataset\"\n",
        "folders = [\"train\", \"test\"]\n",
        "min_size = 127\n",
        "eliminadas = 0\n",
        "\n",
        "for split in folders:\n",
        "    split_path = os.path.join(base_path, split)\n",
        "    for root, _, files in os.walk(split_path):\n",
        "        for file in files:\n",
        "            if file.lower().endswith((\".png\", \".jpg\", \".jpeg\")):\n",
        "                image_path = os.path.join(root, file)\n",
        "                try:\n",
        "                    with Image.open(image_path) as img:\n",
        "                        width, height = img.size\n",
        "                        if width < min_size or height < min_size:\n",
        "                            os.remove(image_path)\n",
        "                            eliminadas += 1\n",
        "                            #print(f\"Eliminada: {image_path} ({width}x{height})\")\n",
        "                except Exception as e:\n",
        "                    print(f\"Error al procesar {image_path}: {e}\")\n",
        "\n",
        "print(f\"\\n✅ Total de imágenes eliminadas: {eliminadas}\")"
      ],
      "metadata": {
        "id": "ea2hCzorYrOq",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b4fe2544-56d7-432e-8855-dd30f972602c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "✅ Total de imágenes eliminadas: 27\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import matplotlib.image as mpimg\n",
        "import seaborn as sns\n",
        "base_ruth = '/kaggle/working/fruit_ripeness_dataset/dataset/train'\n",
        "folder_file_counts = {}\n",
        "\n",
        "for dirpath, dirnames, filenames in os.walk(base_ruth):\n",
        "    relative_path = os.path.relpath(dirpath, base_ruth)\n",
        "    folder_file_counts[relative_path] = len(filenames)\n",
        "\n",
        "df_counts = pd.DataFrame(list(folder_file_counts.items()), columns=['Folder', 'File_Count'])\n",
        "df_counts = df_counts[df_counts['File_Count'] > 0].sort_values(by='File_Count', ascending=False)\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "ax = sns.barplot(data=df_counts, x='File_Count', y='Folder', palette='Blues_d')\n",
        "for i, (count, folder) in enumerate(zip(df_counts['File_Count'], df_counts['Folder'])):\n",
        "    ax.text(count + 0.5, i, str(count), va='center', fontsize=10)\n",
        "plt.title('Número de Archivos en carpeta dataset/train')\n",
        "plt.xlabel('Número de archivos')\n",
        "plt.ylabel('Frutas')\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 698
        },
        "id": "rwd2catVWwkF",
        "outputId": "5a4336ed-0730-4c48-c7b0-e779c290b35f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-7-783187103.py:15: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `y` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  ax = sns.barplot(data=df_counts, x='File_Count', y='Folder', palette='Blues_d')\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import matplotlib.image as mpimg\n",
        "import seaborn as sns\n",
        "base_ruth = '/kaggle/working/fruit_ripeness_dataset/dataset/test'\n",
        "folder_file_counts = {}\n",
        "\n",
        "for dirpath, dirnames, filenames in os.walk(base_ruth):\n",
        "    relative_path = os.path.relpath(dirpath, base_ruth)\n",
        "    folder_file_counts[relative_path] = len(filenames)\n",
        "\n",
        "df_counts = pd.DataFrame(list(folder_file_counts.items()), columns=['Folder', 'File_Count'])\n",
        "df_counts = df_counts[df_counts['File_Count'] > 0].sort_values(by='File_Count', ascending=False)\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "ax = sns.barplot(data=df_counts, x='File_Count', y='Folder', palette='Blues_d')\n",
        "for i, (count, folder) in enumerate(zip(df_counts['File_Count'], df_counts['Folder'])):\n",
        "    ax.text(count + 0.5, i, str(count), va='center', fontsize=10)\n",
        "plt.title('Número de Archivos en carpeta dataset/Test')\n",
        "plt.xlabel('Número de archivos')\n",
        "plt.ylabel('Frutas')\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 698
        },
        "id": "G5w-EfiaYwQR",
        "outputId": "2de97fed-8f37-4d9b-86f5-77df6dfc1fd9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-8-3197881594.py:15: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `y` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  ax = sns.barplot(data=df_counts, x='File_Count', y='Folder', palette='Blues_d')\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install pillow torchvision"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iNCKUpt4a1Xi",
        "outputId": "fbb8372d-7904-4344-a0c9-49fe8b292f52"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: pillow in /usr/local/lib/python3.11/dist-packages (11.2.1)\n",
            "Requirement already satisfied: torchvision in /usr/local/lib/python3.11/dist-packages (0.21.0+cu124)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from torchvision) (2.0.2)\n",
            "Requirement already satisfied: torch==2.6.0 in /usr/local/lib/python3.11/dist-packages (from torchvision) (2.6.0+cu124)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from torch==2.6.0->torchvision) (3.18.0)\n",
            "Requirement already satisfied: typing-extensions>=4.10.0 in /usr/local/lib/python3.11/dist-packages (from torch==2.6.0->torchvision) (4.14.1)\n",
            "Requirement already satisfied: networkx in /usr/local/lib/python3.11/dist-packages (from torch==2.6.0->torchvision) (3.5)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from torch==2.6.0->torchvision) (3.1.6)\n",
            "Requirement already satisfied: fsspec in /usr/local/lib/python3.11/dist-packages (from torch==2.6.0->torchvision) (2025.3.2)\n",
            "Collecting nvidia-cuda-nvrtc-cu12==12.4.127 (from torch==2.6.0->torchvision)\n",
            "  Downloading nvidia_cuda_nvrtc_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n",
            "Collecting nvidia-cuda-runtime-cu12==12.4.127 (from torch==2.6.0->torchvision)\n",
            "  Downloading nvidia_cuda_runtime_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n",
            "Collecting nvidia-cuda-cupti-cu12==12.4.127 (from torch==2.6.0->torchvision)\n",
            "  Downloading nvidia_cuda_cupti_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\n",
            "Collecting nvidia-cudnn-cu12==9.1.0.70 (from torch==2.6.0->torchvision)\n",
            "  Downloading nvidia_cudnn_cu12-9.1.0.70-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\n",
            "Collecting nvidia-cublas-cu12==12.4.5.8 (from torch==2.6.0->torchvision)\n",
            "  Downloading nvidia_cublas_cu12-12.4.5.8-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n",
            "Collecting nvidia-cufft-cu12==11.2.1.3 (from torch==2.6.0->torchvision)\n",
            "  Downloading nvidia_cufft_cu12-11.2.1.3-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n",
            "Collecting nvidia-curand-cu12==10.3.5.147 (from torch==2.6.0->torchvision)\n",
            "  Downloading nvidia_curand_cu12-10.3.5.147-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n",
            "Collecting nvidia-cusolver-cu12==11.6.1.9 (from torch==2.6.0->torchvision)\n",
            "  Downloading nvidia_cusolver_cu12-11.6.1.9-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\n",
            "Collecting nvidia-cusparse-cu12==12.3.1.170 (from torch==2.6.0->torchvision)\n",
            "  Downloading nvidia_cusparse_cu12-12.3.1.170-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\n",
            "Requirement already satisfied: nvidia-cusparselt-cu12==0.6.2 in /usr/local/lib/python3.11/dist-packages (from torch==2.6.0->torchvision) (0.6.2)\n",
            "Requirement already satisfied: nvidia-nccl-cu12==2.21.5 in /usr/local/lib/python3.11/dist-packages (from torch==2.6.0->torchvision) (2.21.5)\n",
            "Requirement already satisfied: nvidia-nvtx-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch==2.6.0->torchvision) (12.4.127)\n",
            "Collecting nvidia-nvjitlink-cu12==12.4.127 (from torch==2.6.0->torchvision)\n",
            "  Downloading nvidia_nvjitlink_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n",
            "Requirement already satisfied: triton==3.2.0 in /usr/local/lib/python3.11/dist-packages (from torch==2.6.0->torchvision) (3.2.0)\n",
            "Requirement already satisfied: sympy==1.13.1 in /usr/local/lib/python3.11/dist-packages (from torch==2.6.0->torchvision) (1.13.1)\n",
            "Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from sympy==1.13.1->torch==2.6.0->torchvision) (1.3.0)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->torch==2.6.0->torchvision) (3.0.2)\n",
            "Downloading nvidia_cublas_cu12-12.4.5.8-py3-none-manylinux2014_x86_64.whl (363.4 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m363.4/363.4 MB\u001b[0m \u001b[31m4.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading nvidia_cuda_cupti_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl (13.8 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m13.8/13.8 MB\u001b[0m \u001b[31m87.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading nvidia_cuda_nvrtc_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl (24.6 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m24.6/24.6 MB\u001b[0m \u001b[31m75.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading nvidia_cuda_runtime_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl (883 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m883.7/883.7 kB\u001b[0m \u001b[31m41.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading nvidia_cudnn_cu12-9.1.0.70-py3-none-manylinux2014_x86_64.whl (664.8 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m664.8/664.8 MB\u001b[0m \u001b[31m2.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading nvidia_cufft_cu12-11.2.1.3-py3-none-manylinux2014_x86_64.whl (211.5 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m211.5/211.5 MB\u001b[0m \u001b[31m6.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading nvidia_curand_cu12-10.3.5.147-py3-none-manylinux2014_x86_64.whl (56.3 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m56.3/56.3 MB\u001b[0m \u001b[31m12.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading nvidia_cusolver_cu12-11.6.1.9-py3-none-manylinux2014_x86_64.whl (127.9 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m127.9/127.9 MB\u001b[0m \u001b[31m6.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading nvidia_cusparse_cu12-12.3.1.170-py3-none-manylinux2014_x86_64.whl (207.5 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m207.5/207.5 MB\u001b[0m \u001b[31m1.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading nvidia_nvjitlink_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl (21.1 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m21.1/21.1 MB\u001b[0m \u001b[31m86.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: nvidia-nvjitlink-cu12, nvidia-curand-cu12, nvidia-cufft-cu12, nvidia-cuda-runtime-cu12, nvidia-cuda-nvrtc-cu12, nvidia-cuda-cupti-cu12, nvidia-cublas-cu12, nvidia-cusparse-cu12, nvidia-cudnn-cu12, nvidia-cusolver-cu12\n",
            "  Attempting uninstall: nvidia-nvjitlink-cu12\n",
            "    Found existing installation: nvidia-nvjitlink-cu12 12.5.82\n",
            "    Uninstalling nvidia-nvjitlink-cu12-12.5.82:\n",
            "      Successfully uninstalled nvidia-nvjitlink-cu12-12.5.82\n",
            "  Attempting uninstall: nvidia-curand-cu12\n",
            "    Found existing installation: nvidia-curand-cu12 10.3.6.82\n",
            "    Uninstalling nvidia-curand-cu12-10.3.6.82:\n",
            "      Successfully uninstalled nvidia-curand-cu12-10.3.6.82\n",
            "  Attempting uninstall: nvidia-cufft-cu12\n",
            "    Found existing installation: nvidia-cufft-cu12 11.2.3.61\n",
            "    Uninstalling nvidia-cufft-cu12-11.2.3.61:\n",
            "      Successfully uninstalled nvidia-cufft-cu12-11.2.3.61\n",
            "  Attempting uninstall: nvidia-cuda-runtime-cu12\n",
            "    Found existing installation: nvidia-cuda-runtime-cu12 12.5.82\n",
            "    Uninstalling nvidia-cuda-runtime-cu12-12.5.82:\n",
            "      Successfully uninstalled nvidia-cuda-runtime-cu12-12.5.82\n",
            "  Attempting uninstall: nvidia-cuda-nvrtc-cu12\n",
            "    Found existing installation: nvidia-cuda-nvrtc-cu12 12.5.82\n",
            "    Uninstalling nvidia-cuda-nvrtc-cu12-12.5.82:\n",
            "      Successfully uninstalled nvidia-cuda-nvrtc-cu12-12.5.82\n",
            "  Attempting uninstall: nvidia-cuda-cupti-cu12\n",
            "    Found existing installation: nvidia-cuda-cupti-cu12 12.5.82\n",
            "    Uninstalling nvidia-cuda-cupti-cu12-12.5.82:\n",
            "      Successfully uninstalled nvidia-cuda-cupti-cu12-12.5.82\n",
            "  Attempting uninstall: nvidia-cublas-cu12\n",
            "    Found existing installation: nvidia-cublas-cu12 12.5.3.2\n",
            "    Uninstalling nvidia-cublas-cu12-12.5.3.2:\n",
            "      Successfully uninstalled nvidia-cublas-cu12-12.5.3.2\n",
            "  Attempting uninstall: nvidia-cusparse-cu12\n",
            "    Found existing installation: nvidia-cusparse-cu12 12.5.1.3\n",
            "    Uninstalling nvidia-cusparse-cu12-12.5.1.3:\n",
            "      Successfully uninstalled nvidia-cusparse-cu12-12.5.1.3\n",
            "  Attempting uninstall: nvidia-cudnn-cu12\n",
            "    Found existing installation: nvidia-cudnn-cu12 9.3.0.75\n",
            "    Uninstalling nvidia-cudnn-cu12-9.3.0.75:\n",
            "      Successfully uninstalled nvidia-cudnn-cu12-9.3.0.75\n",
            "  Attempting uninstall: nvidia-cusolver-cu12\n",
            "    Found existing installation: nvidia-cusolver-cu12 11.6.3.83\n",
            "    Uninstalling nvidia-cusolver-cu12-11.6.3.83:\n",
            "      Successfully uninstalled nvidia-cusolver-cu12-11.6.3.83\n",
            "Successfully installed nvidia-cublas-cu12-12.4.5.8 nvidia-cuda-cupti-cu12-12.4.127 nvidia-cuda-nvrtc-cu12-12.4.127 nvidia-cuda-runtime-cu12-12.4.127 nvidia-cudnn-cu12-9.1.0.70 nvidia-cufft-cu12-11.2.1.3 nvidia-curand-cu12-10.3.5.147 nvidia-cusolver-cu12-11.6.1.9 nvidia-cusparse-cu12-12.3.1.170 nvidia-nvjitlink-cu12-12.4.127\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from torchvision import transforms\n",
        "from tqdm import tqdm\n",
        "import random\n",
        "\n",
        "base_path = \"/kaggle/working/fruit_ripeness_dataset/dataset\"\n",
        "\n",
        "# Data augmentation\n",
        "augmentation = transforms.Compose([\n",
        "    transforms.RandomHorizontalFlip(),\n",
        "    transforms.RandomRotation(20),\n",
        "    transforms.RandomResizedCrop(size=128, scale=(0.8, 1.0)),\n",
        "    transforms.ColorJitter(brightness=0.2, contrast=0.2, saturation=0.2, hue=0.1)\n",
        "])\n",
        "\n",
        "def augment_and_save(src_path, save_path, count):\n",
        "    images = [f for f in os.listdir(src_path) if f.lower().endswith(('.jpg', '.jpeg', '.png'))]\n",
        "    for i in range(count):\n",
        "        img_name = random.choice(images)\n",
        "        img_path = os.path.join(src_path, img_name)\n",
        "        try:\n",
        "            img = Image.open(img_path).convert(\"RGB\")\n",
        "            aug_img = augmentation(img)\n",
        "            new_name = f\"aug_{i}_{img_name}\"\n",
        "            aug_img.save(os.path.join(save_path, new_name))\n",
        "        except Exception as e:\n",
        "            print(f\"Error con {img_path}: {e}\")\n",
        "\n",
        "for split in [\"train\", \"test\"]:\n",
        "    split_path = os.path.join(base_path, split)\n",
        "    class_counts = {}\n",
        "\n",
        "    # Imágenes por clase\n",
        "    for class_name in os.listdir(split_path):\n",
        "        class_dir = os.path.join(split_path, class_name)\n",
        "        if os.path.isdir(class_dir):\n",
        "            count = len([\n",
        "                f for f in os.listdir(class_dir)\n",
        "                if f.lower().endswith(('.jpg', '.jpeg', '.png'))\n",
        "            ])\n",
        "            class_counts[class_name] = count\n",
        "\n",
        "    max_images = max(class_counts.values())\n",
        "\n",
        "    print(f\"\\n📊 {split.upper()} — objetivo: {max_images} imágenes por clase\")\n",
        "\n",
        "    # Data augmentation para igualar\n",
        "    for class_name, count in tqdm(class_counts.items(), desc=f\"Augmentando {split}\"):\n",
        "        if count < max_images:\n",
        "            faltantes = max_images - count\n",
        "            class_dir = os.path.join(split_path, class_name)\n",
        "            print(f\"🔄 {class_name}: generando {faltantes} imágenes...\")\n",
        "            augment_and_save(class_dir, class_dir, faltantes)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QVJQYjCAa_5O",
        "outputId": "651d98e3-240a-4a08-914a-77e03f2d9d66"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "📊 TRAIN — objetivo: 2342 imágenes por clase\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\rAugmentando train:   0%|          | 0/6 [00:00<?, ?it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "🔄 freshbanana: generando 761 imágenes...\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\rAugmentando train:  17%|█▋        | 1/6 [00:12<01:04, 12.85s/it]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "🔄 freshapples: generando 649 imágenes...\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\rAugmentando train:  50%|█████     | 3/6 [00:23<00:22,  7.38s/it]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "🔄 freshoranges: generando 876 imágenes...\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\rAugmentando train:  67%|██████▋   | 4/6 [00:37<00:19,  9.62s/it]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "🔄 rottenoranges: generando 769 imágenes...\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\rAugmentando train:  83%|████████▎ | 5/6 [00:50<00:10, 10.78s/it]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "🔄 rottenbanana: generando 118 imágenes...\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Augmentando train: 100%|██████████| 6/6 [00:52<00:00,  8.80s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "📊 TEST — objetivo: 601 imágenes por clase\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\rAugmentando test:   0%|          | 0/6 [00:00<?, ?it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "🔄 freshbanana: generando 220 imágenes...\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\rAugmentando test:  17%|█▋        | 1/6 [00:03<00:17,  3.49s/it]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "🔄 freshapples: generando 206 imágenes...\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\rAugmentando test:  50%|█████     | 3/6 [00:06<00:06,  2.19s/it]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "🔄 freshoranges: generando 213 imágenes...\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\rAugmentando test:  67%|██████▋   | 4/6 [00:10<00:05,  2.70s/it]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "🔄 rottenoranges: generando 203 imágenes...\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\rAugmentando test:  83%|████████▎ | 5/6 [00:13<00:02,  2.90s/it]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "🔄 rottenbanana: generando 71 imágenes...\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Augmentando test: 100%|██████████| 6/6 [00:15<00:00,  2.51s/it]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import matplotlib.image as mpimg\n",
        "import seaborn as sns\n",
        "base_ruth = '/kaggle/working/fruit_ripeness_dataset/dataset/train'\n",
        "folder_file_counts = {}\n",
        "\n",
        "for dirpath, dirnames, filenames in os.walk(base_ruth):\n",
        "    relative_path = os.path.relpath(dirpath, base_ruth)\n",
        "    folder_file_counts[relative_path] = len(filenames)\n",
        "\n",
        "df_counts = pd.DataFrame(list(folder_file_counts.items()), columns=['Folder', 'File_Count'])\n",
        "df_counts = df_counts[df_counts['File_Count'] > 0].sort_values(by='File_Count', ascending=False)\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "ax = sns.barplot(data=df_counts, x='File_Count', y='Folder', palette='Blues_d')\n",
        "for i, (count, folder) in enumerate(zip(df_counts['File_Count'], df_counts['Folder'])):\n",
        "    ax.text(count + 0.5, i, str(count), va='center', fontsize=10)\n",
        "plt.title('Número de Archivos en carpeta dataset/train')\n",
        "plt.xlabel('Número de archivos')\n",
        "plt.ylabel('Frutas')\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 698
        },
        "id": "aWGQ-aULb40H",
        "outputId": "bc406882-deec-4105-fa2c-1222c2f18050"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-11-783187103.py:15: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `y` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  ax = sns.barplot(data=df_counts, x='File_Count', y='Folder', palette='Blues_d')\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import matplotlib.image as mpimg\n",
        "import seaborn as sns\n",
        "base_ruth = '/kaggle/working/fruit_ripeness_dataset/dataset/test'\n",
        "folder_file_counts = {}\n",
        "\n",
        "for dirpath, dirnames, filenames in os.walk(base_ruth):\n",
        "    relative_path = os.path.relpath(dirpath, base_ruth)\n",
        "    folder_file_counts[relative_path] = len(filenames)\n",
        "\n",
        "df_counts = pd.DataFrame(list(folder_file_counts.items()), columns=['Folder', 'File_Count'])\n",
        "df_counts = df_counts[df_counts['File_Count'] > 0].sort_values(by='File_Count', ascending=False)\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "ax = sns.barplot(data=df_counts, x='File_Count', y='Folder', palette='Blues_d')\n",
        "for i, (count, folder) in enumerate(zip(df_counts['File_Count'], df_counts['Folder'])):\n",
        "    ax.text(count + 0.5, i, str(count), va='center', fontsize=10)\n",
        "plt.title('Número de Archivos en carpeta dataset/train')\n",
        "plt.xlabel('Número de archivos')\n",
        "plt.ylabel('Frutas')\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 698
        },
        "id": "gA9xN4p9cJyu",
        "outputId": "e6eab5de-5ea8-45e6-9191-c0f27887f5c7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-12-2904281414.py:15: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `y` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  ax = sns.barplot(data=df_counts, x='File_Count', y='Folder', palette='Blues_d')\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "base_path = \"/kaggle/working/fruit_ripeness_dataset/dataset\"\n",
        "\n",
        "renombrar = {\n",
        "    \"freshapples\": \"Manzana_buen_estado\",\n",
        "    \"freshbanana\": \"Banano_buen_estado\",\n",
        "    \"freshoranges\": \"Naranja_buen_estado\",\n",
        "    \"rottenapples\": \"Manzana_podrida\",\n",
        "    \"rottenbanana\": \"Banano_podrido\",\n",
        "    \"rottenoranges\": \"Naranja_podrida\"\n",
        "}\n",
        "\n",
        "# Renombrar las carpetas\n",
        "for split in [\"train\", \"test\"]:\n",
        "    split_path = os.path.join(base_path, split)\n",
        "    for folder in os.listdir(split_path):\n",
        "        old_path = os.path.join(split_path, folder)\n",
        "        if folder.lower() in renombrar:\n",
        "            new_name = renombrar[folder.lower()]\n",
        "            new_path = os.path.join(split_path, new_name)\n",
        "            os.rename(old_path, new_path)\n",
        "            print(f\"✅ {split}: {folder} ➝ {new_name}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Oy-7464nddOu",
        "outputId": "389aff4e-3100-490d-9529-af2cb587ba21"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ train: freshbanana ➝ Banano_buen_estado\n",
            "✅ train: rottenapples ➝ Manzana_podrida\n",
            "✅ train: freshapples ➝ Manzana_buen_estado\n",
            "✅ train: freshoranges ➝ Naranja_buen_estado\n",
            "✅ train: rottenoranges ➝ Naranja_podrida\n",
            "✅ train: rottenbanana ➝ Banano_podrido\n",
            "✅ test: freshbanana ➝ Banano_buen_estado\n",
            "✅ test: rottenapples ➝ Manzana_podrida\n",
            "✅ test: freshapples ➝ Manzana_buen_estado\n",
            "✅ test: freshoranges ➝ Naranja_buen_estado\n",
            "✅ test: rottenoranges ➝ Naranja_podrida\n",
            "✅ test: rottenbanana ➝ Banano_podrido\n"
          ]
        }
      ]
    }
  ]
}