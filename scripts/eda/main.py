{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMn4CHVR5Bk/SI+1tUmFc0c",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Paipi11/Proyecto_control_calidad/blob/main/scripts/eda/main.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **Carga o Adquisición de Datos**\n",
        "---\n",
        "\n",
        "Para la carga de datos, se utilizó la API de Kaggle para obtener los datos directamente."
      ],
      "metadata": {
        "id": "Y2ZEygzYZK3j"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "E6udLSEZXPOI",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "aed64373-ed7f-4605-f159-54eb9bb5aebc"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: kagglehub in /usr/local/lib/python3.11/dist-packages (0.3.12)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.11/dist-packages (from kagglehub) (24.2)\n",
            "Requirement already satisfied: pyyaml in /usr/local/lib/python3.11/dist-packages (from kagglehub) (6.0.2)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from kagglehub) (2.32.3)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.11/dist-packages (from kagglehub) (4.67.1)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests->kagglehub) (3.4.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests->kagglehub) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests->kagglehub) (2.4.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests->kagglehub) (2025.6.15)\n"
          ]
        }
      ],
      "source": [
        "!pip install kagglehub"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Cargamos las librerías necesarias para realizar los filtros y depuración de los datos"
      ],
      "metadata": {
        "id": "dkz0BaQJZShH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import kagglehub\n",
        "import shutil\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from pathlib import Path\n",
        "from PIL import Image"
      ],
      "metadata": {
        "id": "8KAMmlLpXluy"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "ruta = kagglehub.dataset_download(\"leftin/fruit-ripeness-unripe-ripe-and-rotten\")\n",
        "ruta_destino = \"/kaggle/working/fruit_dataset_editable\"\n",
        "\n",
        "if os.path.exists(ruta_destino):\n",
        "    shutil.rmtree(ruta_destino)\n",
        "\n",
        "shutil.copytree(ruta, ruta_destino)\n",
        "print(f\"Dataset copiado a: {ruta_destino}\")"
      ],
      "metadata": {
        "id": "VH6K9z5CXssD",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8fdfd6cf-0a8c-4214-f77f-8bccd69a9417"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading from https://www.kaggle.com/api/v1/datasets/download/leftin/fruit-ripeness-unripe-ripe-and-rotten?dataset_version_number=1...\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 3.64G/3.64G [00:32<00:00, 121MB/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Extracting files...\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dataset copiado a: /kaggle/working/fruit_dataset_editable\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Se quiere observar la jerarquía de las carpetas\n",
        "\n",
        "**Nota:**\n",
        "Tener presente que solo utilizaremos los folders que tienen el identificador de **fresh** y **rotten**. El de **unripe** se descartará del modelo."
      ],
      "metadata": {
        "id": "Q--DbNepZmw1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def mostr(carpeta, n=0):\n",
        "    esp = \"  \" * n +\"-\"\n",
        "    for i in sorted(os.listdir(carpeta)):\n",
        "        ruta = os.path.join(carpeta, i)\n",
        "        if os.path.isdir(ruta):\n",
        "            print(esp + i)\n",
        "            mostr(ruta, n +1)\n",
        "mostr(ruta_destino)"
      ],
      "metadata": {
        "id": "Hbe3TJ56X0Ax",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0cb2366c-8038-4720-a12b-4ebdfac06017"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-archive (1)\n",
            "  -dataset\n",
            "    -dataset\n",
            "      -test\n",
            "        -freshapples\n",
            "        -freshbanana\n",
            "        -freshoranges\n",
            "        -rottenapples\n",
            "        -rottenbanana\n",
            "        -rottenoranges\n",
            "        -unripe apple\n",
            "        -unripe banana\n",
            "        -unripe orange\n",
            "      -train\n",
            "        -freshapples\n",
            "        -freshbanana\n",
            "        -freshoranges\n",
            "        -rottenapples\n",
            "        -rottenbanana\n",
            "        -rottenoranges\n",
            "        -unripe apple\n",
            "        -unripe banana\n",
            "        -unripe orange\n",
            "    -test\n",
            "      -freshapples\n",
            "      -freshbanana\n",
            "      -freshoranges\n",
            "      -rottenapples\n",
            "      -rottenbanana\n",
            "      -rottenoranges\n",
            "      -unripe apple\n",
            "      -unripe banana\n",
            "      -unripe orange\n",
            "    -train\n",
            "      -freshapples\n",
            "      -freshbanana\n",
            "      -freshoranges\n",
            "      -rottenapples\n",
            "      -rottenbanana\n",
            "      -rottenoranges\n",
            "      -unripe apple\n",
            "      -unripe banana\n",
            "      -unripe orange\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Se reorganiza la jerarquía de las carpetas introduciendo el folder \"dataset 2\""
      ],
      "metadata": {
        "id": "Ie2cLTanZ3hU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "base_ruth = os.path.join(ruta_destino, 'archive (1)', 'dataset')\n",
        "carpeta_test = os.path.join(base_ruth, 'test')\n",
        "carpeta_train = os.path.join(base_ruth, 'train')\n",
        "conjunto_01 = os.path.join(base_ruth, 'dataset 2')\n",
        "shutil.move(carpeta_test, os.path.join(conjunto_01, 'test'))\n",
        "shutil.move(carpeta_train, os.path.join(conjunto_01, 'train'))"
      ],
      "metadata": {
        "id": "Gh8jWEOxYkGm",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 36
        },
        "outputId": "21de1c30-9b8c-4607-a62b-dec7387f26ca"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'/kaggle/working/fruit_dataset_editable/archive (1)/dataset/dataset 2/train'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Al conocer que el folder \"dataset 2\" es igual a \"dataset 1\" se procede a eliminarla y a su vez se eliminan las carpetas de **unripe** que están fuera del objetivo del proyecto."
      ],
      "metadata": {
        "id": "wSkGveRDaH-0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import shutil\n",
        "from pathlib import Path\n",
        "\n",
        "shutil.rmtree(\"/kaggle/working/fruit_dataset_editable/archive (1)/dataset/dataset 2\")\n",
        "\n",
        "directorio_01 = Path('/kaggle/working/fruit_dataset_editable/archive (1)/dataset/dataset/test/unripe apple')\n",
        "directorio_02 = Path('/kaggle/working/fruit_dataset_editable/archive (1)/dataset/dataset/test/unripe banana')\n",
        "directorio_03 = Path('/kaggle/working/fruit_dataset_editable/archive (1)/dataset/dataset/test/unripe orange')\n",
        "\n",
        "shutil.rmtree(directorio_01)\n",
        "shutil.rmtree(directorio_02)\n",
        "shutil.rmtree(directorio_03)\n",
        "\n",
        "directorio_01_1 = Path('/kaggle/working/fruit_dataset_editable/archive (1)/dataset/dataset/train/unripe apple')\n",
        "directorio_02_2 = Path('/kaggle/working/fruit_dataset_editable/archive (1)/dataset/dataset/train/unripe banana')\n",
        "directorio_03_3 = Path('/kaggle/working/fruit_dataset_editable/archive (1)/dataset/dataset/train/unripe orange')\n",
        "\n",
        "shutil.rmtree(directorio_01_1)\n",
        "shutil.rmtree(directorio_02_2)\n",
        "shutil.rmtree(directorio_03_3)"
      ],
      "metadata": {
        "id": "WjIsT5HbYn_d"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Finalmente, se eliminan las 27 imagenes que no cumplen con el criterio de 128x128 pixeles como mínimo."
      ],
      "metadata": {
        "id": "-2i7wR9OamX4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "ancho_min = 127\n",
        "alto_min = 127\n",
        "\n",
        "t = 0\n",
        "for r, d, f in os.walk(base_ruth):\n",
        "    for file in f:\n",
        "        ruta_imagen = os.path.join(r, file)\n",
        "\n",
        "        with Image.open(ruta_imagen) as img:\n",
        "                ancho, alto = img.size\n",
        "                if ancho < ancho_min or alto < alto_min:\n",
        "                    img.close()\n",
        "                    os.remove(ruta_imagen)\n",
        "                    t += 1\n",
        "t"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ea2hCzorYrOq",
        "outputId": "e7462fc7-367e-476e-9f7f-fad38d467a48"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "27"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import matplotlib.image as mpimg\n",
        "import seaborn as sns\n",
        "base_ruth = '/kaggle/working/fruit_dataset_editable/archive (1)/dataset/dataset/train'\n",
        "folder_file_counts = {}\n",
        "\n",
        "for dirpath, dirnames, filenames in os.walk(base_ruth):\n",
        "    relative_path = os.path.relpath(dirpath, base_ruth)\n",
        "    folder_file_counts[relative_path] = len(filenames)\n",
        "\n",
        "df_counts = pd.DataFrame(list(folder_file_counts.items()), columns=['Folder', 'File_Count'])\n",
        "df_counts = df_counts[df_counts['File_Count'] > 0].sort_values(by='File_Count', ascending=False)\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "ax = sns.barplot(data=df_counts, x='File_Count', y='Folder', palette='Blues_d')\n",
        "for i, (count, folder) in enumerate(zip(df_counts['File_Count'], df_counts['Folder'])):\n",
        "    ax.text(count + 0.5, i, str(count), va='center', fontsize=10)\n",
        "plt.title('Número de Archivos en carpeta dataset/train')\n",
        "plt.xlabel('Número de archivos')\n",
        "plt.ylabel('Frutas')\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 698
        },
        "id": "gWo0XyyHEuWy",
        "outputId": "64e89856-6991-44d6-8f61-725d1acd8bfb"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-8-2031569059.py:15: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `y` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  ax = sns.barplot(data=df_counts, x='File_Count', y='Folder', palette='Blues_d')\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import matplotlib.image as mpimg\n",
        "import seaborn as sns\n",
        "base_ruth = '/kaggle/working/fruit_dataset_editable/archive (1)/dataset/dataset/test'\n",
        "folder_file_counts = {}\n",
        "\n",
        "for dirpath, dirnames, filenames in os.walk(base_ruth):\n",
        "    relative_path = os.path.relpath(dirpath, base_ruth)\n",
        "    folder_file_counts[relative_path] = len(filenames)\n",
        "\n",
        "df_counts = pd.DataFrame(list(folder_file_counts.items()), columns=['Folder', 'File_Count'])\n",
        "df_counts = df_counts[df_counts['File_Count'] > 0].sort_values(by='File_Count', ascending=False)\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "ax = sns.barplot(data=df_counts, x='File_Count', y='Folder', palette='Blues_d')\n",
        "for i, (count, folder) in enumerate(zip(df_counts['File_Count'], df_counts['Folder'])):\n",
        "    ax.text(count + 0.5, i, str(count), va='center', fontsize=10)\n",
        "plt.title('Número de Archivos en carpeta dataset/test')\n",
        "plt.xlabel('Número de archivos')\n",
        "plt.ylabel('Frutas')\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 698
        },
        "id": "ZAxT5Ho_FPd_",
        "outputId": "25c542bf-681b-4828-809e-14333f0cdcb5"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-20-3196624809.py:15: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `y` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  ax = sns.barplot(data=df_counts, x='File_Count', y='Folder', palette='Blues_d')\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "base_ruth = '/kaggle/working/fruit_dataset_editable/archive (1)/dataset'\n",
        "image_data = []\n",
        "\n",
        "for dirpath, dirnames, filenames in os.walk(base_ruth):\n",
        "    for file in filenames:\n",
        "        if file.lower().endswith(('.jpg', '.jpeg', '.png')):\n",
        "            full_path = os.path.join(dirpath, file)\n",
        "            try:\n",
        "                with Image.open(full_path) as img:\n",
        "                    width, height = img.size\n",
        "                    image_data.append({\n",
        "                        'Path': full_path,\n",
        "                        'Width': width,\n",
        "                        'Height': height,\n",
        "                        'Resolution': f'{width}x{height}'\n",
        "                    })\n",
        "            except Exception as e:\n",
        "                print(f\"Error loading image {full_path}: {e}\")\n",
        "df_images = pd.DataFrame(image_data)\n",
        "\n",
        "df_images.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "TbAwbJmRFLXM",
        "outputId": "066268d9-a97e-482e-a573-723905d3c9da"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                                Path  Width  Height Resolution\n",
              "0  /kaggle/working/fruit_dataset_editable/archive...    564     392    564x392\n",
              "1  /kaggle/working/fruit_dataset_editable/archive...    472     362    472x362\n",
              "2  /kaggle/working/fruit_dataset_editable/archive...    452     410    452x410\n",
              "3  /kaggle/working/fruit_dataset_editable/archive...    668     424    668x424\n",
              "4  /kaggle/working/fruit_dataset_editable/archive...    312     246    312x246"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-083300d0-8c85-466b-9fb9-6e6ca0df311f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Path</th>\n",
              "      <th>Width</th>\n",
              "      <th>Height</th>\n",
              "      <th>Resolution</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>/kaggle/working/fruit_dataset_editable/archive...</td>\n",
              "      <td>564</td>\n",
              "      <td>392</td>\n",
              "      <td>564x392</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>/kaggle/working/fruit_dataset_editable/archive...</td>\n",
              "      <td>472</td>\n",
              "      <td>362</td>\n",
              "      <td>472x362</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>/kaggle/working/fruit_dataset_editable/archive...</td>\n",
              "      <td>452</td>\n",
              "      <td>410</td>\n",
              "      <td>452x410</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>/kaggle/working/fruit_dataset_editable/archive...</td>\n",
              "      <td>668</td>\n",
              "      <td>424</td>\n",
              "      <td>668x424</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>/kaggle/working/fruit_dataset_editable/archive...</td>\n",
              "      <td>312</td>\n",
              "      <td>246</td>\n",
              "      <td>312x246</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-083300d0-8c85-466b-9fb9-6e6ca0df311f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-083300d0-8c85-466b-9fb9-6e6ca0df311f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-083300d0-8c85-466b-9fb9-6e6ca0df311f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-6cf43487-a93d-4860-85d1-61d955e864f8\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6cf43487-a93d-4860-85d1-61d955e864f8')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-6cf43487-a93d-4860-85d1-61d955e864f8 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_images",
              "summary": "{\n  \"name\": \"df_images\",\n  \"rows\": 13572,\n  \"fields\": [\n    {\n      \"column\": \"Path\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 13572,\n        \"samples\": [\n          \"/kaggle/working/fruit_dataset_editable/archive (1)/dataset/dataset/train/rottenbanana/saltandpepper_Screen Shot 2018-06-12 at 8.57.34 PM.png\",\n          \"/kaggle/working/fruit_dataset_editable/archive (1)/dataset/dataset/train/freshapples/Screen Shot 2018-06-08 at 5.00.26 PM.png\",\n          \"/kaggle/working/fruit_dataset_editable/archive (1)/dataset/dataset/train/freshoranges/vertical_flip_Screen Shot 2018-06-13 at 12.04.46 AM.png\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Width\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 128,\n        \"min\": 144,\n        \"max\": 862,\n        \"num_unique_values\": 289,\n        \"samples\": [\n          716,\n          688,\n          150\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Height\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 75,\n        \"min\": 128,\n        \"max\": 518,\n        \"num_unique_values\": 182,\n        \"samples\": [\n          382,\n          376,\n          146\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Resolution\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1447,\n        \"samples\": [\n          \"538x446\",\n          \"332x328\",\n          \"310x346\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "len(df_images)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jsDxFT3uG5vR",
        "outputId": "eeb648fd-b5ce-4fe3-c623-6a6210d3be87"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "13572"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_split = df_images['Path'].str.split('/', expand=True)\n",
        "df_split.columns = [f'Level_{i+1}' for i in range(df_split.shape[1])]\n",
        "df_images = pd.concat([df_split, df_images], axis=1)\n",
        "df_images.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 293
        },
        "id": "nPZR_0oaFd2r",
        "outputId": "f8ac4c35-58ea-498e-d778-bf95a27af38b"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Level_1 Level_2  Level_3                 Level_4      Level_5  Level_6  \\\n",
              "0          kaggle  working  fruit_dataset_editable  archive (1)  dataset   \n",
              "1          kaggle  working  fruit_dataset_editable  archive (1)  dataset   \n",
              "2          kaggle  working  fruit_dataset_editable  archive (1)  dataset   \n",
              "3          kaggle  working  fruit_dataset_editable  archive (1)  dataset   \n",
              "4          kaggle  working  fruit_dataset_editable  archive (1)  dataset   \n",
              "\n",
              "   Level_7 Level_8       Level_9  \\\n",
              "0  dataset   train  rottenbanana   \n",
              "1  dataset   train  rottenbanana   \n",
              "2  dataset   train  rottenbanana   \n",
              "3  dataset   train  rottenbanana   \n",
              "4  dataset   train  rottenbanana   \n",
              "\n",
              "                                            Level_10  \\\n",
              "0  rotated_by_15_Screen Shot 2018-06-12 at 8.56.1...   \n",
              "1  rotated_by_60_Screen Shot 2018-06-12 at 8.56.4...   \n",
              "2  rotated_by_75_Screen Shot 2018-06-12 at 8.56.2...   \n",
              "3  translation_Screen Shot 2018-06-12 at 9.25.09 ...   \n",
              "4  rotated_by_30_Screen Shot 2018-06-12 at 9.11.4...   \n",
              "\n",
              "                                                Path  Width  Height Resolution  \n",
              "0  /kaggle/working/fruit_dataset_editable/archive...    564     392    564x392  \n",
              "1  /kaggle/working/fruit_dataset_editable/archive...    472     362    472x362  \n",
              "2  /kaggle/working/fruit_dataset_editable/archive...    452     410    452x410  \n",
              "3  /kaggle/working/fruit_dataset_editable/archive...    668     424    668x424  \n",
              "4  /kaggle/working/fruit_dataset_editable/archive...    312     246    312x246  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-44ddfde0-05eb-4f1b-a1bb-f2f84e546e6f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Level_1</th>\n",
              "      <th>Level_2</th>\n",
              "      <th>Level_3</th>\n",
              "      <th>Level_4</th>\n",
              "      <th>Level_5</th>\n",
              "      <th>Level_6</th>\n",
              "      <th>Level_7</th>\n",
              "      <th>Level_8</th>\n",
              "      <th>Level_9</th>\n",
              "      <th>Level_10</th>\n",
              "      <th>Path</th>\n",
              "      <th>Width</th>\n",
              "      <th>Height</th>\n",
              "      <th>Resolution</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td></td>\n",
              "      <td>kaggle</td>\n",
              "      <td>working</td>\n",
              "      <td>fruit_dataset_editable</td>\n",
              "      <td>archive (1)</td>\n",
              "      <td>dataset</td>\n",
              "      <td>dataset</td>\n",
              "      <td>train</td>\n",
              "      <td>rottenbanana</td>\n",
              "      <td>rotated_by_15_Screen Shot 2018-06-12 at 8.56.1...</td>\n",
              "      <td>/kaggle/working/fruit_dataset_editable/archive...</td>\n",
              "      <td>564</td>\n",
              "      <td>392</td>\n",
              "      <td>564x392</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td></td>\n",
              "      <td>kaggle</td>\n",
              "      <td>working</td>\n",
              "      <td>fruit_dataset_editable</td>\n",
              "      <td>archive (1)</td>\n",
              "      <td>dataset</td>\n",
              "      <td>dataset</td>\n",
              "      <td>train</td>\n",
              "      <td>rottenbanana</td>\n",
              "      <td>rotated_by_60_Screen Shot 2018-06-12 at 8.56.4...</td>\n",
              "      <td>/kaggle/working/fruit_dataset_editable/archive...</td>\n",
              "      <td>472</td>\n",
              "      <td>362</td>\n",
              "      <td>472x362</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td></td>\n",
              "      <td>kaggle</td>\n",
              "      <td>working</td>\n",
              "      <td>fruit_dataset_editable</td>\n",
              "      <td>archive (1)</td>\n",
              "      <td>dataset</td>\n",
              "      <td>dataset</td>\n",
              "      <td>train</td>\n",
              "      <td>rottenbanana</td>\n",
              "      <td>rotated_by_75_Screen Shot 2018-06-12 at 8.56.2...</td>\n",
              "      <td>/kaggle/working/fruit_dataset_editable/archive...</td>\n",
              "      <td>452</td>\n",
              "      <td>410</td>\n",
              "      <td>452x410</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td></td>\n",
              "      <td>kaggle</td>\n",
              "      <td>working</td>\n",
              "      <td>fruit_dataset_editable</td>\n",
              "      <td>archive (1)</td>\n",
              "      <td>dataset</td>\n",
              "      <td>dataset</td>\n",
              "      <td>train</td>\n",
              "      <td>rottenbanana</td>\n",
              "      <td>translation_Screen Shot 2018-06-12 at 9.25.09 ...</td>\n",
              "      <td>/kaggle/working/fruit_dataset_editable/archive...</td>\n",
              "      <td>668</td>\n",
              "      <td>424</td>\n",
              "      <td>668x424</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td></td>\n",
              "      <td>kaggle</td>\n",
              "      <td>working</td>\n",
              "      <td>fruit_dataset_editable</td>\n",
              "      <td>archive (1)</td>\n",
              "      <td>dataset</td>\n",
              "      <td>dataset</td>\n",
              "      <td>train</td>\n",
              "      <td>rottenbanana</td>\n",
              "      <td>rotated_by_30_Screen Shot 2018-06-12 at 9.11.4...</td>\n",
              "      <td>/kaggle/working/fruit_dataset_editable/archive...</td>\n",
              "      <td>312</td>\n",
              "      <td>246</td>\n",
              "      <td>312x246</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-44ddfde0-05eb-4f1b-a1bb-f2f84e546e6f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-44ddfde0-05eb-4f1b-a1bb-f2f84e546e6f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-44ddfde0-05eb-4f1b-a1bb-f2f84e546e6f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-5381bb50-ffed-4be1-9cb0-5708a556a052\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5381bb50-ffed-4be1-9cb0-5708a556a052')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-5381bb50-ffed-4be1-9cb0-5708a556a052 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_images",
              "summary": "{\n  \"name\": \"df_images\",\n  \"rows\": 13572,\n  \"fields\": [\n    {\n      \"column\": \"Level_1\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Level_2\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"kaggle\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Level_3\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"working\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Level_4\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"fruit_dataset_editable\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Level_5\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"archive (1)\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Level_6\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"dataset\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Level_7\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"dataset\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Level_8\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"test\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Level_9\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"rottenbanana\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Level_10\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 13572,\n        \"samples\": [\n          \"saltandpepper_Screen Shot 2018-06-12 at 8.57.34 PM.png\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Path\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 13572,\n        \"samples\": [\n          \"/kaggle/working/fruit_dataset_editable/archive (1)/dataset/dataset/train/rottenbanana/saltandpepper_Screen Shot 2018-06-12 at 8.57.34 PM.png\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Width\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 128,\n        \"min\": 144,\n        \"max\": 862,\n        \"num_unique_values\": 289,\n        \"samples\": [\n          716\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Height\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 75,\n        \"min\": 128,\n        \"max\": 518,\n        \"num_unique_values\": 182,\n        \"samples\": [\n          382\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Resolution\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1447,\n        \"samples\": [\n          \"538x446\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import re\n",
        "df_images['Level_9'] = df_images['Level_9'].str.strip().str.replace(r'\\s+', ' ', regex=True)\n",
        "\n",
        "def split_status(text):\n",
        "    match = re.match(r'^(fresh|unripe|rotten)\\s*(.*)', text, re.IGNORECASE)\n",
        "    if match:\n",
        "        return pd.Series([match.group(1).lower(), match.group(2).strip()])\n",
        "    else:\n",
        "        return pd.Series([None, text])\n",
        "\n",
        "df_images[['Estado', 'Fruta']] = df_images['Level_9'].apply(split_status)\n",
        "df_images = df_images.drop(columns=['Level_1','Level_2','Level_3','Level_4','Level_5','Level_6'])\n",
        "df_images.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "3qucW99vFgUd",
        "outputId": "e31dcee6-f909-4d6b-d9ce-2803e8856d0d"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Level_7 Level_8       Level_9  \\\n",
              "0  dataset   train  rottenbanana   \n",
              "1  dataset   train  rottenbanana   \n",
              "2  dataset   train  rottenbanana   \n",
              "3  dataset   train  rottenbanana   \n",
              "4  dataset   train  rottenbanana   \n",
              "\n",
              "                                            Level_10  \\\n",
              "0  rotated_by_15_Screen Shot 2018-06-12 at 8.56.1...   \n",
              "1  rotated_by_60_Screen Shot 2018-06-12 at 8.56.4...   \n",
              "2  rotated_by_75_Screen Shot 2018-06-12 at 8.56.2...   \n",
              "3  translation_Screen Shot 2018-06-12 at 9.25.09 ...   \n",
              "4  rotated_by_30_Screen Shot 2018-06-12 at 9.11.4...   \n",
              "\n",
              "                                                Path  Width  Height  \\\n",
              "0  /kaggle/working/fruit_dataset_editable/archive...    564     392   \n",
              "1  /kaggle/working/fruit_dataset_editable/archive...    472     362   \n",
              "2  /kaggle/working/fruit_dataset_editable/archive...    452     410   \n",
              "3  /kaggle/working/fruit_dataset_editable/archive...    668     424   \n",
              "4  /kaggle/working/fruit_dataset_editable/archive...    312     246   \n",
              "\n",
              "  Resolution  Estado   Fruta  \n",
              "0    564x392  rotten  banana  \n",
              "1    472x362  rotten  banana  \n",
              "2    452x410  rotten  banana  \n",
              "3    668x424  rotten  banana  \n",
              "4    312x246  rotten  banana  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-76d861bc-245b-45cb-8f1f-d76f28c74364\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Level_7</th>\n",
              "      <th>Level_8</th>\n",
              "      <th>Level_9</th>\n",
              "      <th>Level_10</th>\n",
              "      <th>Path</th>\n",
              "      <th>Width</th>\n",
              "      <th>Height</th>\n",
              "      <th>Resolution</th>\n",
              "      <th>Estado</th>\n",
              "      <th>Fruta</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>dataset</td>\n",
              "      <td>train</td>\n",
              "      <td>rottenbanana</td>\n",
              "      <td>rotated_by_15_Screen Shot 2018-06-12 at 8.56.1...</td>\n",
              "      <td>/kaggle/working/fruit_dataset_editable/archive...</td>\n",
              "      <td>564</td>\n",
              "      <td>392</td>\n",
              "      <td>564x392</td>\n",
              "      <td>rotten</td>\n",
              "      <td>banana</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>dataset</td>\n",
              "      <td>train</td>\n",
              "      <td>rottenbanana</td>\n",
              "      <td>rotated_by_60_Screen Shot 2018-06-12 at 8.56.4...</td>\n",
              "      <td>/kaggle/working/fruit_dataset_editable/archive...</td>\n",
              "      <td>472</td>\n",
              "      <td>362</td>\n",
              "      <td>472x362</td>\n",
              "      <td>rotten</td>\n",
              "      <td>banana</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>dataset</td>\n",
              "      <td>train</td>\n",
              "      <td>rottenbanana</td>\n",
              "      <td>rotated_by_75_Screen Shot 2018-06-12 at 8.56.2...</td>\n",
              "      <td>/kaggle/working/fruit_dataset_editable/archive...</td>\n",
              "      <td>452</td>\n",
              "      <td>410</td>\n",
              "      <td>452x410</td>\n",
              "      <td>rotten</td>\n",
              "      <td>banana</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>dataset</td>\n",
              "      <td>train</td>\n",
              "      <td>rottenbanana</td>\n",
              "      <td>translation_Screen Shot 2018-06-12 at 9.25.09 ...</td>\n",
              "      <td>/kaggle/working/fruit_dataset_editable/archive...</td>\n",
              "      <td>668</td>\n",
              "      <td>424</td>\n",
              "      <td>668x424</td>\n",
              "      <td>rotten</td>\n",
              "      <td>banana</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>dataset</td>\n",
              "      <td>train</td>\n",
              "      <td>rottenbanana</td>\n",
              "      <td>rotated_by_30_Screen Shot 2018-06-12 at 9.11.4...</td>\n",
              "      <td>/kaggle/working/fruit_dataset_editable/archive...</td>\n",
              "      <td>312</td>\n",
              "      <td>246</td>\n",
              "      <td>312x246</td>\n",
              "      <td>rotten</td>\n",
              "      <td>banana</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-76d861bc-245b-45cb-8f1f-d76f28c74364')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-76d861bc-245b-45cb-8f1f-d76f28c74364 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-76d861bc-245b-45cb-8f1f-d76f28c74364');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-5c108d15-e26c-44cb-a267-a90ab5974605\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5c108d15-e26c-44cb-a267-a90ab5974605')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-5c108d15-e26c-44cb-a267-a90ab5974605 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_images",
              "summary": "{\n  \"name\": \"df_images\",\n  \"rows\": 13572,\n  \"fields\": [\n    {\n      \"column\": \"Level_7\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"dataset\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Level_8\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"test\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Level_9\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"rottenbanana\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Level_10\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 13572,\n        \"samples\": [\n          \"saltandpepper_Screen Shot 2018-06-12 at 8.57.34 PM.png\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Path\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 13572,\n        \"samples\": [\n          \"/kaggle/working/fruit_dataset_editable/archive (1)/dataset/dataset/train/rottenbanana/saltandpepper_Screen Shot 2018-06-12 at 8.57.34 PM.png\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Width\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 128,\n        \"min\": 144,\n        \"max\": 862,\n        \"num_unique_values\": 289,\n        \"samples\": [\n          716\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Height\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 75,\n        \"min\": 128,\n        \"max\": 518,\n        \"num_unique_values\": 182,\n        \"samples\": [\n          382\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Resolution\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1447,\n        \"samples\": [\n          \"538x446\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Estado\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"fresh\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fruta\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"banana\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_images['Fruta'].replace('apples', 'apple', inplace=True)\n",
        "df_images['Fruta'].replace('oranges', 'orange', inplace=True)\n",
        "df_images['Fruta'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 485
        },
        "id": "OlN2pYJfFmas",
        "outputId": "f7f706e8-1e4a-44c6-9620-e4fe18e9dca9"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-13-753191703.py:1: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
            "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
            "\n",
            "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
            "\n",
            "\n",
            "  df_images['Fruta'].replace('apples', 'apple', inplace=True)\n",
            "/tmp/ipython-input-13-753191703.py:2: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
            "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
            "\n",
            "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
            "\n",
            "\n",
            "  df_images['Fruta'].replace('oranges', 'orange', inplace=True)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Fruta\n",
              "apple     5031\n",
              "banana    4716\n",
              "orange    3825\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Fruta</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>apple</th>\n",
              "      <td>5031</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>banana</th>\n",
              "      <td>4716</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>orange</th>\n",
              "      <td>3825</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_images['Estado'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 178
        },
        "id": "eFLRN-YwFn7N",
        "outputId": "ac15afd8-2c14-47bb-e512-3461ebd67b26"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Estado\n",
              "rotten    7668\n",
              "fresh     5904\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Estado</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>rotten</th>\n",
              "      <td>7668</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>fresh</th>\n",
              "      <td>5904</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import LabelEncoder\n",
        "le = LabelEncoder()\n",
        "df_images['Fruta label'] = le.fit_transform(df_images['Fruta'])\n",
        "df_images['Total resolution'] = df_images.Width * df_images.Height\n",
        "df_images.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "koTDGp9mFtxE",
        "outputId": "f819389e-5372-4dac-de3a-d79fc4190436"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Level_7 Level_8       Level_9  \\\n",
              "0  dataset   train  rottenbanana   \n",
              "1  dataset   train  rottenbanana   \n",
              "2  dataset   train  rottenbanana   \n",
              "3  dataset   train  rottenbanana   \n",
              "4  dataset   train  rottenbanana   \n",
              "\n",
              "                                            Level_10  \\\n",
              "0  rotated_by_15_Screen Shot 2018-06-12 at 8.56.1...   \n",
              "1  rotated_by_60_Screen Shot 2018-06-12 at 8.56.4...   \n",
              "2  rotated_by_75_Screen Shot 2018-06-12 at 8.56.2...   \n",
              "3  translation_Screen Shot 2018-06-12 at 9.25.09 ...   \n",
              "4  rotated_by_30_Screen Shot 2018-06-12 at 9.11.4...   \n",
              "\n",
              "                                                Path  Width  Height  \\\n",
              "0  /kaggle/working/fruit_dataset_editable/archive...    564     392   \n",
              "1  /kaggle/working/fruit_dataset_editable/archive...    472     362   \n",
              "2  /kaggle/working/fruit_dataset_editable/archive...    452     410   \n",
              "3  /kaggle/working/fruit_dataset_editable/archive...    668     424   \n",
              "4  /kaggle/working/fruit_dataset_editable/archive...    312     246   \n",
              "\n",
              "  Resolution  Estado   Fruta  Fruta label  Total resolution  \n",
              "0    564x392  rotten  banana            1            221088  \n",
              "1    472x362  rotten  banana            1            170864  \n",
              "2    452x410  rotten  banana            1            185320  \n",
              "3    668x424  rotten  banana            1            283232  \n",
              "4    312x246  rotten  banana            1             76752  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-500edba6-c3a7-4a1e-88f7-c43a4ef0b543\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Level_7</th>\n",
              "      <th>Level_8</th>\n",
              "      <th>Level_9</th>\n",
              "      <th>Level_10</th>\n",
              "      <th>Path</th>\n",
              "      <th>Width</th>\n",
              "      <th>Height</th>\n",
              "      <th>Resolution</th>\n",
              "      <th>Estado</th>\n",
              "      <th>Fruta</th>\n",
              "      <th>Fruta label</th>\n",
              "      <th>Total resolution</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>dataset</td>\n",
              "      <td>train</td>\n",
              "      <td>rottenbanana</td>\n",
              "      <td>rotated_by_15_Screen Shot 2018-06-12 at 8.56.1...</td>\n",
              "      <td>/kaggle/working/fruit_dataset_editable/archive...</td>\n",
              "      <td>564</td>\n",
              "      <td>392</td>\n",
              "      <td>564x392</td>\n",
              "      <td>rotten</td>\n",
              "      <td>banana</td>\n",
              "      <td>1</td>\n",
              "      <td>221088</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>dataset</td>\n",
              "      <td>train</td>\n",
              "      <td>rottenbanana</td>\n",
              "      <td>rotated_by_60_Screen Shot 2018-06-12 at 8.56.4...</td>\n",
              "      <td>/kaggle/working/fruit_dataset_editable/archive...</td>\n",
              "      <td>472</td>\n",
              "      <td>362</td>\n",
              "      <td>472x362</td>\n",
              "      <td>rotten</td>\n",
              "      <td>banana</td>\n",
              "      <td>1</td>\n",
              "      <td>170864</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>dataset</td>\n",
              "      <td>train</td>\n",
              "      <td>rottenbanana</td>\n",
              "      <td>rotated_by_75_Screen Shot 2018-06-12 at 8.56.2...</td>\n",
              "      <td>/kaggle/working/fruit_dataset_editable/archive...</td>\n",
              "      <td>452</td>\n",
              "      <td>410</td>\n",
              "      <td>452x410</td>\n",
              "      <td>rotten</td>\n",
              "      <td>banana</td>\n",
              "      <td>1</td>\n",
              "      <td>185320</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>dataset</td>\n",
              "      <td>train</td>\n",
              "      <td>rottenbanana</td>\n",
              "      <td>translation_Screen Shot 2018-06-12 at 9.25.09 ...</td>\n",
              "      <td>/kaggle/working/fruit_dataset_editable/archive...</td>\n",
              "      <td>668</td>\n",
              "      <td>424</td>\n",
              "      <td>668x424</td>\n",
              "      <td>rotten</td>\n",
              "      <td>banana</td>\n",
              "      <td>1</td>\n",
              "      <td>283232</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>dataset</td>\n",
              "      <td>train</td>\n",
              "      <td>rottenbanana</td>\n",
              "      <td>rotated_by_30_Screen Shot 2018-06-12 at 9.11.4...</td>\n",
              "      <td>/kaggle/working/fruit_dataset_editable/archive...</td>\n",
              "      <td>312</td>\n",
              "      <td>246</td>\n",
              "      <td>312x246</td>\n",
              "      <td>rotten</td>\n",
              "      <td>banana</td>\n",
              "      <td>1</td>\n",
              "      <td>76752</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-500edba6-c3a7-4a1e-88f7-c43a4ef0b543')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-500edba6-c3a7-4a1e-88f7-c43a4ef0b543 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-500edba6-c3a7-4a1e-88f7-c43a4ef0b543');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-14f71eaa-5a42-4d0c-b10e-6049e0de50d5\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-14f71eaa-5a42-4d0c-b10e-6049e0de50d5')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-14f71eaa-5a42-4d0c-b10e-6049e0de50d5 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_images",
              "summary": "{\n  \"name\": \"df_images\",\n  \"rows\": 13572,\n  \"fields\": [\n    {\n      \"column\": \"Level_7\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"dataset\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Level_8\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"test\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Level_9\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"rottenbanana\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Level_10\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 13572,\n        \"samples\": [\n          \"saltandpepper_Screen Shot 2018-06-12 at 8.57.34 PM.png\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Path\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 13572,\n        \"samples\": [\n          \"/kaggle/working/fruit_dataset_editable/archive (1)/dataset/dataset/train/rottenbanana/saltandpepper_Screen Shot 2018-06-12 at 8.57.34 PM.png\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Width\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 128,\n        \"min\": 144,\n        \"max\": 862,\n        \"num_unique_values\": 289,\n        \"samples\": [\n          716\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Height\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 75,\n        \"min\": 128,\n        \"max\": 518,\n        \"num_unique_values\": 182,\n        \"samples\": [\n          382\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Resolution\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1447,\n        \"samples\": [\n          \"538x446\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Estado\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"fresh\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fruta\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"banana\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fruta label\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Total resolution\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 68134,\n        \"min\": 20992,\n        \"max\": 383320,\n        \"num_unique_values\": 1396,\n        \"samples\": [\n          149328\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "display(df_images['Fruta label'].unique())\n",
        "display(le.classes_)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 54
        },
        "id": "6kM02SdbFyva",
        "outputId": "031a644d-2e8c-4310-a300-6ab30333c2ba"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "array([1, 2, 0])"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "array(['apple', 'banana', 'orange'], dtype=object)"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_images.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "drIMMfubF3Yg",
        "outputId": "4c780be8-7b25-4cf2-f38f-eb2969c75c28"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              Width        Height   Fruta label  Total resolution\n",
              "count  13572.000000  13572.000000  13572.000000      13572.000000\n",
              "mean     417.923077    353.277188      0.911141     154329.647215\n",
              "std      128.552117     75.792149      0.802914      68134.810610\n",
              "min      144.000000    128.000000      0.000000      20992.000000\n",
              "25%      328.000000    312.000000      0.000000     105366.000000\n",
              "50%      404.000000    364.000000      1.000000     149856.000000\n",
              "75%      496.000000    408.000000      2.000000     200208.000000\n",
              "max      862.000000    518.000000      2.000000     383320.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2836da99-15a1-4cb4-8794-6e658ac563ed\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Width</th>\n",
              "      <th>Height</th>\n",
              "      <th>Fruta label</th>\n",
              "      <th>Total resolution</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>13572.000000</td>\n",
              "      <td>13572.000000</td>\n",
              "      <td>13572.000000</td>\n",
              "      <td>13572.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>417.923077</td>\n",
              "      <td>353.277188</td>\n",
              "      <td>0.911141</td>\n",
              "      <td>154329.647215</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>128.552117</td>\n",
              "      <td>75.792149</td>\n",
              "      <td>0.802914</td>\n",
              "      <td>68134.810610</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>144.000000</td>\n",
              "      <td>128.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>20992.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>328.000000</td>\n",
              "      <td>312.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>105366.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>404.000000</td>\n",
              "      <td>364.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>149856.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>496.000000</td>\n",
              "      <td>408.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>200208.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>862.000000</td>\n",
              "      <td>518.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>383320.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2836da99-15a1-4cb4-8794-6e658ac563ed')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2836da99-15a1-4cb4-8794-6e658ac563ed button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2836da99-15a1-4cb4-8794-6e658ac563ed');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-fdc7dc61-9437-4a9f-ac73-c0f50b3016eb\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fdc7dc61-9437-4a9f-ac73-c0f50b3016eb')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-fdc7dc61-9437-4a9f-ac73-c0f50b3016eb button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df_images\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Width\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4663.6211363662915,\n        \"min\": 128.5521167622928,\n        \"max\": 13572.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          417.9230769230769,\n          404.0,\n          13572.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Height\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4691.59472444538,\n        \"min\": 75.79214914711478,\n        \"max\": 13572.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          353.2771883289125,\n          364.0,\n          13572.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fruta label\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4798.087566219323,\n        \"min\": 0.0,\n        \"max\": 13572.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          13572.0,\n          0.9111405835543767,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Total resolution\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 119265.50959414203,\n        \"min\": 13572.0,\n        \"max\": 383320.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          154329.6472148541,\n          149856.0,\n          13572.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "corr_matrix = df_images.corr(numeric_only=True)\n",
        "sns.heatmap(corr_matrix, vmin=-1, vmax=1,annot=True )"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 453
        },
        "id": "7Q3hIuCDF5bW",
        "outputId": "99435d6d-71f6-4f34-c990-a26ae4d9bc9b"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 18
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "custom_palette = {\n",
        "    'orange': 'orange',\n",
        "    'apple': 'green',\n",
        "    'banana': 'brown'\n",
        "}\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.histplot(data=df_images, x='Total resolution', hue='Fruta', kde=True, bins=10, element='step',palette=custom_palette)\n",
        "plt.title('Resolución total de imágenes por fruta ')\n",
        "plt.xlabel('Resolución total')\n",
        "plt.ylabel('Frecuencia')\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 565
        },
        "id": "7K9pBObYF8fu",
        "outputId": "5bb66980-513a-4ebf-9d6e-289c98448cb8"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}